
entonces con required en no transaccional lo que hace es agregar si todo está ok
y si alguna de las dos tareass falla no hace nada

ese coduigo que acabo de agregar es para que en caso de que mande campos vacíos los detecte como nulos y no como una cadena vacía

ahí aparece ese vacío por lo que lo ejecutamos antes de colocar lo del codigo del web.xml

basicamente en el entorno no transaccional el required y el requires_new es lo mismo

cuando no es transaccional y se accede a un metodo supported, lo que hace es tomar cada una de las tareas independientes
por lo que si alguna de las dos acciones falla una si debe funcionar.

el mandatory obliga a que el cliente que lo llama tenga que ser de un entorno transaccional, de lo contrario lanza una excepcion y no hace nada
en la BD

el not supported basicamente realiza lo mismo que el supported ya que al ser llamado desde un cliente no transaccional ejecuta cada accion como tareas independientes y no como un conjunto

el never en un entorno NO transaccional realiza lo mismo que el supported y el not supported

Entorno no transaccional
--------------
Required
disco = ok + pelicula = ok = resultado ok -> funciona
disco = ok + pelicula = falla = resultado falla -> funciona
--------------
requires_new
disco = ok + pelicula = ok = resultado ok -> funciona
disco = ok + pelicula = falla = resultado falla -> funciona
--------------
supported
disco = ok + pelicula = ok = resultado ok -> funciona
disco = ok + pelicula = falla = resultado (disco - ok / pelicula - falla) -> funciona
--------------
mandatory
disco = ok + pelicula = ok = resultado excepcion -> funciona
disco = ok + pelicula = falla = resultado excepcion -> funciona
--------------
not supported
disco = ok + pelicula = ok = resultado ok -> funciona
disco = ok + pelicula = falla = resultado (disco - ok / pelicula - falla) -> funciona
--------------
never
disco = ok + pelicula = ok = resultado ok -> funciona
disco = ok + pelicula = falla = resultado (disco - ok / pelicula - falla) -> funciona
-------------------------------------------------------------------------------------------------------------------------



un entorno transaccional es aque en el cual se conectan dos ejb's o más, ahí ya nos encontramos con las transacciones por lo que las reglas cambian un poco a la hora de probar

para este caso vamos a probar todo ya con las tres tablas vale

en required basicamente lo que hace es unirse a la transaccion del cliente que lo llame, por lo que al final queda una sola transaccion

con requires new lo que hace al ser en un entorno transaccional, es crear una nueva transaccion en memoria por lo que son dos transacciones independientes una para libro y otra para disco y pelicula

en support con el entorno transaccional lo quer hace es manejar el mismo tipo de transaccion con la que viene el cliente que lo invoca
en este caso como el cliente que lo invoca es un required lo que hace es unirse a la transaccion y queda como una sola transaccion 

para un entorno transaccional con la etiqueta mandatory, se notaa que trabaja con la transaccion que llega el cliente, para lo que el resultado obtenido es el mismo que el de un required o un supported

en el caso del not supported lo que quiere decir es que no soporta la transaccionalidad por lo que cada una de sus tareas c¿son completamente independientes
en caso de que una tarea falle, las demás tareas se ejecutarán siempre y cuando se encuentren antes de donde se genere el error

en el caso del never, lo que hace es que no puede ser accesado por ningun ejb, por lo que solo agrega datos en la parte del cliente y lanza una excepcion


---------------
required
libro = ok + disco = ok + pelicula = ok = resultado ok -> funciiona
libro = ok + disco = ok + pelicula = falla = resultado falla -> funciona
---------------
requires_new
libro = ok + disco = ok + pelicula = ok = resultado ok -> funciona
libro = ok + disco = ok + pelicula = falla = resultado (libro ok / pelicula y disco falla) -> funciona
---------------
supported
libro = ok + disco = ok + pelicula = ok = resultado ok -> funciona
libro = ok + disco = ok + pelicula = falla = resultado falla -> funciona
---------------
mandatory
libro = ok + disco = ok + pelicula = ok = resultado ok -> funciona
libro = ok + disco = ok + pelicula = falla = resultado falla -> funciona
---------------
not supported
libro = ok + disco = ok + pelicula = ok = resultado ok -> funciona
libro = ok + disco = ok + pelicula = falla = resultado (libro ok / disco ok / pelicula falla) -> funciona
---------------
never
libro = ok + disco = ok + pelicula = ok = resultado (libro ok / excepcion) -> funciona
libro = ok + disco = ok + pelicula = falla = resultado (libro ok / Excepcion) -> funciona
---------------


y de esta forma concluimos las pruebas en la arte transaccional